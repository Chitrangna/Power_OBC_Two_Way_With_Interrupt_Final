
PowerOBCtwoway-Power.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002ec  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b75  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089c  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064b  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a0  00000000  00000000  00002535  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "uart.h"
//-----------------slave receiver----------------------------//
//unsigned char msg_buf[8]={'9','9','9','9','9','9','9','9'};
//msg_buf[0]='9';
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2f 97       	sbiw	r28, 0x0f	; 15
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
    sei();
  a6:	78 94       	sei
	//msg_buf[0] ='9';
	unsigned char HM_data[7];
	unsigned char msg_buf[8];
	unsigned char SLA=0x20;
	//msg_buf[0] ='9';
	HM_data[0]='9';
  a8:	89 e3       	ldi	r24, 0x39	; 57
  aa:	89 83       	std	Y+1, r24	; 0x01
	init_UART();
  ac:	0e 94 62 01 	call	0x2c4	; 0x2c4 <init_UART>
	TWI_Slave_Initialise(SLA);
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	0e 94 77 00 	call	0xee	; 0xee <TWI_Slave_Initialise>
	
	/* TWCR = (1<<TWEN)|                                 // TWI Interface enabled
	 (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
	 (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
	 (0<<TWWC);*/
	TWI_Start_Transceiver_With_Data(msg_buf,1);
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	ce 01       	movw	r24, r28
  ba:	08 96       	adiw	r24, 0x08	; 8
  bc:	0e 94 7d 00 	call	0xfa	; 0xfa <TWI_Start_Transceiver_With_Data>
    while (1) 
    {
		
		unsigned char z = TWI_Get_Data_From_Transceiver(msg_buf , 1);//sr
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	ce 01       	movw	r24, r28
  c4:	08 96       	adiw	r24, 0x08	; 8
  c6:	0e 94 a0 00 	call	0x140	; 0x140 <TWI_Get_Data_From_Transceiver>
		//transmit_UART('a');
		transmit_UART(msg_buf[0]);//sr
  ca:	88 85       	ldd	r24, Y+8	; 0x08
  cc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <transmit_UART>
		//transmit_UART('b');
		//HM_data[0]='9';
		TWI_Start_Transceiver_With_Data(HM_data,1);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	0e 94 7d 00 	call	0xfa	; 0xfa <TWI_Start_Transceiver_With_Data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	8d e3       	ldi	r24, 0x3D	; 61
  de:	99 e4       	ldi	r25, 0x49	; 73
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x4e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x58>
  ea:	00 00       	nop
  ec:	e9 cf       	rjmp	.-46     	; 0xc0 <main+0x2e>

000000ee <TWI_Slave_Initialise>:
  TWI_state         = TWI_NO_STATE ;
  TWCR = (1<<TWEN)|                             // TWI Interface enabled.
         (1<<TWIE)|(1<<TWINT)|                  // Enable TWI Interupt and clear the flag.
         (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|       // Prepare to ACK next time the Slave is addressed.
         (0<<TWWC);                             //
  TWI_busy = 0;
  ee:	82 b9       	out	0x02, r24	; 2
  f0:	84 e0       	ldi	r24, 0x04	; 4
  f2:	86 bf       	out	0x36, r24	; 54
  f4:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <TWI_busy>
  f8:	08 95       	ret

000000fa <TWI_Start_Transceiver_With_Data>:
  fa:	9c 01       	movw	r18, r24
  fc:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <TWI_busy>
 100:	91 11       	cpse	r25, r1
 102:	fe cf       	rjmp	.-4      	; 0x100 <TWI_Start_Transceiver_With_Data+0x6>
 104:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <TWI_msgSize>
 108:	66 23       	and	r22, r22
 10a:	79 f0       	breq	.+30     	; 0x12a <TWI_Start_Transceiver_With_Data+0x30>
 10c:	f9 01       	movw	r30, r18
 10e:	a6 e6       	ldi	r26, 0x66	; 102
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	61 50       	subi	r22, 0x01	; 1
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	6f 5f       	subi	r22, 0xFF	; 255
 118:	7f 4f       	sbci	r23, 0xFF	; 255
 11a:	c9 01       	movw	r24, r18
 11c:	86 0f       	add	r24, r22
 11e:	97 1f       	adc	r25, r23
 120:	21 91       	ld	r18, Z+
 122:	2d 93       	st	X+, r18
 124:	e8 17       	cp	r30, r24
 126:	f9 07       	cpc	r31, r25
 128:	d9 f7       	brne	.-10     	; 0x120 <TWI_Start_Transceiver_With_Data+0x26>
 12a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <TWI_statusReg>
 12e:	88 ef       	ldi	r24, 0xF8	; 248
 130:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 134:	85 ec       	ldi	r24, 0xC5	; 197
 136:	86 bf       	out	0x36, r24	; 54
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TWI_busy>
 13e:	08 95       	ret

00000140 <TWI_Get_Data_From_Transceiver>:
****************************************************************************/
unsigned char TWI_Get_Data_From_Transceiver( unsigned char *msg, unsigned char msgSize )
{
  unsigned char i;

  while ( TWI_Transceiver_Busy() ) {_delay_ms(0.0000001);}             // Wait until TWI is ready for next transmission.
 140:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <TWI_busy>
 144:	22 23       	and	r18, r18
 146:	29 f0       	breq	.+10     	; 0x152 <TWI_Get_Data_From_Transceiver+0x12>
 148:	00 00       	nop
 14a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <TWI_busy>
 14e:	21 11       	cpse	r18, r1
 150:	fb cf       	rjmp	.-10     	; 0x148 <TWI_Get_Data_From_Transceiver+0x8>

  if( TWI_statusReg.lastTransOK )               // Last transmission completed successfully.              
 152:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <TWI_statusReg>
 156:	20 ff       	sbrs	r18, 0
 158:	15 c0       	rjmp	.+42     	; 0x184 <TWI_Get_Data_From_Transceiver+0x44>
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
 15a:	66 23       	and	r22, r22
 15c:	71 f0       	breq	.+28     	; 0x17a <TWI_Get_Data_From_Transceiver+0x3a>
 15e:	e6 e6       	ldi	r30, 0x66	; 102
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	a8 2f       	mov	r26, r24
 164:	b9 2f       	mov	r27, r25
 166:	61 50       	subi	r22, 0x01	; 1
 168:	86 2f       	mov	r24, r22
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	89 59       	subi	r24, 0x99	; 153
 16e:	9f 4f       	sbci	r25, 0xFF	; 255
    {
      msg[ i ] = TWI_buf[ i ];
 170:	21 91       	ld	r18, Z+
 172:	2d 93       	st	X+, r18

  while ( TWI_Transceiver_Busy() ) {_delay_ms(0.0000001);}             // Wait until TWI is ready for next transmission.

  if( TWI_statusReg.lastTransOK )               // Last transmission completed successfully.              
  {                                             
    for ( i=0; i<msgSize; i++ )                 // Copy data from Transceiver buffer.
 174:	e8 17       	cp	r30, r24
 176:	f9 07       	cpc	r31, r25
 178:	d9 f7       	brne	.-10     	; 0x170 <TWI_Get_Data_From_Transceiver+0x30>
      msg[ i ] = TWI_buf[ i ];
	  // transmit_UART('1');
	  // transmit_UART(msg[0]);
	  // transmit_UART('2');
    }
    TWI_statusReg.RxDataInBuf = FALSE;          // Slave Receive data has been read from buffer.
 17a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 17e:	8d 7f       	andi	r24, 0xFD	; 253
 180:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
  }
 
  return( TWI_statusReg.lastTransOK );                                   
 184:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
}
 188:	81 70       	andi	r24, 0x01	; 1
 18a:	08 95       	ret

0000018c <__vector_19>:
This function is the Interrupt Service Routine (ISR), and called when the TWI interrupt is triggered;
that is whenever a TWI event has occurred. This function should not be called directly from the main
application.
****************************************************************************/
ISR(TWI_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	//transmit_UART('*');
	//transmit_UART(TWDR);
  static unsigned char TWI_bufPtr;
  
  switch (TWSR)
 19e:	81 b1       	in	r24, 0x01	; 1
 1a0:	80 39       	cpi	r24, 0x90	; 144
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <__vector_19+0x1a>
 1a4:	5e c0       	rjmp	.+188    	; 0x262 <__vector_19+0xd6>
 1a6:	90 f4       	brcc	.+36     	; 0x1cc <__vector_19+0x40>
 1a8:	80 37       	cpi	r24, 0x70	; 112
 1aa:	09 f4       	brne	.+2      	; 0x1ae <__vector_19+0x22>
 1ac:	48 c0       	rjmp	.+144    	; 0x23e <__vector_19+0xb2>
 1ae:	38 f4       	brcc	.+14     	; 0x1be <__vector_19+0x32>
 1b0:	88 23       	and	r24, r24
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <__vector_19+0x2a>
 1b4:	71 c0       	rjmp	.+226    	; 0x298 <__vector_19+0x10c>
 1b6:	80 36       	cpi	r24, 0x60	; 96
 1b8:	09 f4       	brne	.+2      	; 0x1bc <__vector_19+0x30>
 1ba:	46 c0       	rjmp	.+140    	; 0x248 <__vector_19+0xbc>
 1bc:	73 c0       	rjmp	.+230    	; 0x2a4 <__vector_19+0x118>
 1be:	80 38       	cpi	r24, 0x80	; 128
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <__vector_19+0x38>
 1c2:	4f c0       	rjmp	.+158    	; 0x262 <__vector_19+0xd6>
 1c4:	88 38       	cpi	r24, 0x88	; 136
 1c6:	09 f4       	brne	.+2      	; 0x1ca <__vector_19+0x3e>
 1c8:	67 c0       	rjmp	.+206    	; 0x298 <__vector_19+0x10c>
 1ca:	6c c0       	rjmp	.+216    	; 0x2a4 <__vector_19+0x118>
 1cc:	88 3a       	cpi	r24, 0xA8	; 168
 1ce:	81 f0       	breq	.+32     	; 0x1f0 <__vector_19+0x64>
 1d0:	38 f4       	brcc	.+14     	; 0x1e0 <__vector_19+0x54>
 1d2:	88 39       	cpi	r24, 0x98	; 152
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <__vector_19+0x4c>
 1d6:	60 c0       	rjmp	.+192    	; 0x298 <__vector_19+0x10c>
 1d8:	80 3a       	cpi	r24, 0xA0	; 160
 1da:	09 f4       	brne	.+2      	; 0x1de <__vector_19+0x52>
 1dc:	58 c0       	rjmp	.+176    	; 0x28e <__vector_19+0x102>
 1de:	62 c0       	rjmp	.+196    	; 0x2a4 <__vector_19+0x118>
 1e0:	80 3c       	cpi	r24, 0xC0	; 192
 1e2:	c9 f0       	breq	.+50     	; 0x216 <__vector_19+0x8a>
 1e4:	88 3c       	cpi	r24, 0xC8	; 200
 1e6:	09 f4       	brne	.+2      	; 0x1ea <__vector_19+0x5e>
 1e8:	57 c0       	rjmp	.+174    	; 0x298 <__vector_19+0x10c>
 1ea:	88 3b       	cpi	r24, 0xB8	; 184
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <__vector_19+0x68>
 1ee:	5a c0       	rjmp	.+180    	; 0x2a4 <__vector_19+0x118>
  {
    case TWI_STX_ADR_ACK:            // Own SLA+R has been received; ACK has been returned
//    case TWI_STX_ADR_ACK_M_ARB_LOST: // Arbitration lost in SLA+R/W as Master; own SLA+R has been received; ACK has been returned
      TWI_bufPtr   = 0;                                 // Set buffer pointer to first data location
 1f0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
    case TWI_STX_DATA_ACK:           // Data byte in TWDR has been transmitted; ACK has been received
      TWDR = TWI_buf[TWI_bufPtr++];
 1f4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	8e 0f       	add	r24, r30
 1fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ea 59       	subi	r30, 0x9A	; 154
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	80 81       	ld	r24, Z
 208:	83 b9       	out	0x03, r24	; 3
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 20a:	85 ec       	ldi	r24, 0xC5	; 197
 20c:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interupt and clear the flag to send byte
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // 
             (0<<TWWC);                                 //
      TWI_busy = 1;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TWI_busy>
      break;
 214:	4e c0       	rjmp	.+156    	; 0x2b2 <__vector_19+0x126>
    case TWI_STX_DATA_NACK:          // Data byte in TWDR has been transmitted; NACK has been received. 
                                     // I.e. this could be the end of the transmission.
      if (TWI_bufPtr == TWI_msgSize) // Have we transceived all expected data?
 216:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 21a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <TWI_msgSize>
 21e:	98 13       	cpse	r25, r24
 220:	06 c0       	rjmp	.+12     	; 0x22e <__vector_19+0xa2>
      {
        TWI_statusReg.lastTransOK = TRUE;               // Set status bits to completed successfully. 
 222:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 226:	81 60       	ori	r24, 0x01	; 1
 228:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
 22c:	03 c0       	rjmp	.+6      	; 0x234 <__vector_19+0xa8>
      } 
      else                          // Master has sent a NACK before all data where sent.
      {
        TWI_state = TWSR;                               // Store TWI State as errormessage.      
 22e:	81 b1       	in	r24, 0x01	; 1
 230:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      }        
                                                        
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 234:	85 ec       	ldi	r24, 0xC5	; 197
 236:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Keep interrupt enabled and clear the flag
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Answer on next address match
             (0<<TWWC);                                 //
      
      TWI_busy = 0;   // Transmit is finished, we are not busy anymore
 238:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <TWI_busy>
      break;     
 23c:	3a c0       	rjmp	.+116    	; 0x2b2 <__vector_19+0x126>
    case TWI_SRX_GEN_ACK:            // General call address has been received; ACK has been returned
//    case TWI_SRX_GEN_ACK_M_ARB_LOST: // Arbitration lost in SLA+R/W as Master; General call address has been received; ACK has been returned
      TWI_statusReg.genAddressCall = TRUE;
 23e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 242:	84 60       	ori	r24, 0x04	; 4
 244:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
    case TWI_SRX_ADR_ACK:            // Own SLA+W has been received ACK has been returned
//    case TWI_SRX_ADR_ACK_M_ARB_LOST: // Arbitration lost in SLA+R/W as Master; own SLA+W has been received; ACK has been returned    
                                                        // Don't need to clear TWI_S_statusRegister.generalAddressCall due to that it is the default state.
      TWI_statusReg.RxDataInBuf = TRUE;      
 248:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
      TWI_bufPtr   = 0;                                 // Set buffer pointer to first data location
 252:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
      
                                                        // Reset the TWI Interrupt to wait for a new event.
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 256:	85 ec       	ldi	r24, 0xC5	; 197
 258:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Expect ACK on this transmission
             (0<<TWWC);  
      TWI_busy = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TWI_busy>
      
      break;
 260:	28 c0       	rjmp	.+80     	; 0x2b2 <__vector_19+0x126>
    case TWI_SRX_ADR_DATA_ACK:       // Previously addressed with own SLA+W; data has been received; ACK has been returned
    case TWI_SRX_GEN_DATA_ACK:       // Previously addressed with general call; data has been received; ACK has been returned
      TWI_buf[TWI_bufPtr++]     = TWDR;
 262:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	8e 0f       	add	r24, r30
 26a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 26e:	83 b1       	in	r24, 0x03	; 3
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ea 59       	subi	r30, 0x9A	; 154
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	80 83       	st	Z, r24
      TWI_statusReg.lastTransOK = TRUE;                 // Set flag transmission successful.       
 278:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <TWI_statusReg>
 27c:	81 60       	ori	r24, 0x01	; 1
 27e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <TWI_statusReg>
                                                        // Reset the TWI Interrupt to wait for a new event.
      TWCR = (1<<TWEN)|                                 // TWI Interface enabled
 282:	85 ec       	ldi	r24, 0xC5	; 197
 284:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Enable TWI Interrupt and clear the flag to send byte
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Send ACK after next reception
             (0<<TWWC);                                 // 
      TWI_busy = 1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <TWI_busy>
      break;
 28c:	12 c0       	rjmp	.+36     	; 0x2b2 <__vector_19+0x126>
    case TWI_SRX_STOP_RESTART:       // A STOP condition or repeated START condition has been received while still addressed as Slave    
                                                        // Enter not addressed mode and listen to address match
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 28e:	85 ec       	ldi	r24, 0xC5	; 197
 290:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Enable interrupt and clear the flag
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Wait for new address match
             (0<<TWWC);                                 //
      
      TWI_busy = 0;  // We are waiting for a new address match, so we are not busy
 292:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <TWI_busy>
      
      break;           
 296:	0d c0       	rjmp	.+26     	; 0x2b2 <__vector_19+0x126>
    case TWI_SRX_ADR_DATA_NACK:      // Previously addressed with own SLA+W; data has been received; NOT ACK has been returned
    case TWI_SRX_GEN_DATA_NACK:      // Previously addressed with general call; data has been received; NOT ACK has been returned
    case TWI_STX_DATA_ACK_LAST_BYTE: // Last data byte in TWDR has been transmitted (TWEA = “0”); ACK has been received
      //    case TWI_NO_STATE              // No relevant state information available; TWINT = “0”
    case TWI_BUS_ERROR:         // Bus error due to an illegal START or STOP condition
      TWI_state = TWSR;                 //Store TWI State as errormessage, operation also clears noErrors bit
 298:	81 b1       	in	r24, 0x01	; 1
 29a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      TWCR =   (1<<TWSTO)|(1<<TWINT);   //Recover from TWI_BUS_ERROR, this will release the SDA and SCL pins thus enabling other devices to use the bus
 29e:	80 e9       	ldi	r24, 0x90	; 144
 2a0:	86 bf       	out	0x36, r24	; 54
      break;
 2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <__vector_19+0x126>
    default:     
      TWI_state = TWSR;                                 // Store TWI State as errormessage, operation also clears the Success bit.      
 2a4:	81 b1       	in	r24, 0x01	; 1
 2a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
      TWCR = (1<<TWEN)|                                 // Enable TWI-interface and release TWI pins
 2aa:	85 ec       	ldi	r24, 0xC5	; 197
 2ac:	86 bf       	out	0x36, r24	; 54
             (1<<TWIE)|(1<<TWINT)|                      // Keep interrupt enabled and clear the flag
             (1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           // Acknowledge on any new requests.
             (0<<TWWC);                                 //
      
      TWI_busy = 0; // Unknown status, so we wait for a new address match that might be something we can handle
 2ae:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <TWI_busy>
  }
}
 2b2:	ff 91       	pop	r31
 2b4:	ef 91       	pop	r30
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <init_UART>:


void init_UART(void )
{

  UCSRA = 0;
 2c4:	1b b8       	out	0x0b, r1	; 11
  UCSRB = 0;
 2c6:	1a b8       	out	0x0a, r1	; 10
  UCSRC = 0;
 2c8:	10 bc       	out	0x20, r1	; 32
  
  ///Double Baud Rate
  UCSRA |= _BV(U2X);
 2ca:	59 9a       	sbi	0x0b, 1	; 11
  ///Enable Reception
  UCSRB |= _BV(RXEN) | _BV(TXEN);
 2cc:	8a b1       	in	r24, 0x0a	; 10
 2ce:	88 61       	ori	r24, 0x18	; 24
 2d0:	8a b9       	out	0x0a, r24	; 10
  ///8-bit Data Byte, 2 Stop bits
  UCSRC |= _BV(USBS) | _BV(UCSZ1) | _BV(UCSZ0);
 2d2:	80 b5       	in	r24, 0x20	; 32
 2d4:	8e 60       	ori	r24, 0x0E	; 14
 2d6:	80 bd       	out	0x20, r24	; 32
  ///Set Baud Rate to 9600
  UBRRL = 103;
 2d8:	87 e6       	ldi	r24, 0x67	; 103
 2da:	89 b9       	out	0x09, r24	; 9
  UBRRH = 0;
 2dc:	10 bc       	out	0x20, r1	; 32
 2de:	08 95       	ret

000002e0 <transmit_UART>:
}

void transmit_UART(uint8_t data)
{
  //* Wait for empty transmit buffer 
  while ( !(UCSRA & (_BV(UDRE))) );
 2e0:	5d 9b       	sbis	0x0b, 5	; 11
 2e2:	fe cf       	rjmp	.-4      	; 0x2e0 <transmit_UART>
  //* Start transmission
  UDR = data;
 2e4:	8c b9       	out	0x0c, r24	; 12
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
